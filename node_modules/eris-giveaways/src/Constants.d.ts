import { AdvancedMessageContent, Constants, Member } from "eris";
import { Giveaway } from "./Giveaway";
export interface BonusEntry {
    bonus(member?: Member, giveaway?: Giveaway): number | Promise<number>;
    cumulative?: boolean;
}
export interface InteractionOptions {
    enabled?: boolean;
    ephemeral?: boolean;
}
export interface LastChanceOptions {
    enabled?: boolean;
    embedColor?: number;
    content?: string;
    threshold?: number;
}
export interface PauseOptions {
    isPaused?: boolean;
    content?: string;
    unPauseAfter?: number;
    embedColor?: number;
    durationAfterPause?: number;
    infiniteDurationText?: string;
}
export interface GiveawayStartOptions {
    prize: string;
    winnerCount: number;
    duration?: number;
    hostedBy?: string;
    botsCanWin?: boolean;
    exemptPermissions?: [keyof Constants["Permissions"]];
    exemptMembers?: (member: Member) => boolean | Promise<boolean>;
    bonusEntries?: BonusEntry[];
    embedColor?: number;
    embedColorEnd?: number;
    reaction?: string;
    messages?: GiveawaysMessages;
    thumbnail?: string;
    image?: string;
    extraData?: any;
    lastChance?: LastChanceOptions;
    pauseOptions?: PauseOptions;
    isDrop?: boolean;
}
export interface GiveawaysMessages {
    giveaway?: string;
    giveawayEnded?: string;
    inviteToParticipate?: string;
    winMessage?: string | AdvancedMessageContent;
    drawing?: string;
    title?: string;
    dropMessage?: string;
    embedFooter?: string | {
        text?: string;
        iconURL?: string;
    };
    noWinner?: string;
    winners?: string;
    endedAt?: string;
    hostedBy?: string;
}
export interface GiveawaysManagerOptions {
    storage?: string;
    forceUpdateEvery?: number;
    endedGiveawaysLifetime?: number;
    default?: {
        botsCanWin?: boolean;
        exemptPermissions?: [keyof Constants["Permissions"]] | any;
        exemptMembers?: (member: Member) => boolean | Promise<boolean>;
        embedColor?: number;
        embedColorEnd?: number;
        reaction?: string;
        lastChance?: LastChanceOptions;
    };
}
export interface GiveawayEditOptions {
    newWinnerCount?: number;
    newPrize?: string;
    addTime?: number;
    setEndTimestamp?: number;
    newMessages?: GiveawaysMessages;
    newThumbnail?: string;
    newImage?: string;
    newBonusEntries?: BonusEntry[];
    newExemptMembers?: (member: Member) => boolean | Promise<boolean>;
    newExtraData?: any;
    newLastChance?: LastChanceOptions;
}
export interface GiveawayRerollOptions {
    winnerCount?: number;
    messages?: {
        congrat?: string | AdvancedMessageContent;
        error?: string | AdvancedMessageContent;
    };
    interactionOptions?: InteractionOptions;
}
export interface GiveawayData {
    startAt: number;
    botsCanWin: boolean;
    endAt: number;
    winnerCount: number;
    messages: GiveawaysMessages;
    prize: string;
    channelID: string;
    guildID: string;
    ended?: boolean;
    winnerIDs?: string[];
    messageID?: string;
    reaction?: string;
    exemptPermissions?: [keyof Constants["Permissions"]];
    exemptMembers?: string;
    bonusEntries?: string;
    embedColor?: number;
    embedColorEnd?: number;
    thumbnail?: string;
    image?: string;
    hostedBy?: string;
    extraData?: any;
    lastChance?: LastChanceOptions;
    pauseOptions?: PauseOptions;
    isDrop?: boolean;
}
export declare const Endpoints: {
    MESSAGE_URL: (guildID: string, channelID: string, messageID: string) => string;
};
export declare const GiveawayMessages: GiveawaysMessages;
export declare const InteractionOptions: InteractionOptions;
export declare const LastChanceOptions: LastChanceOptions;
export declare const PauseOptions: PauseOptions;
export declare const GiveawayManagerOptions: GiveawaysManagerOptions;
export declare const GiveawayRerollOptions: GiveawayRerollOptions;
export declare const GiveawayData: GiveawayData;
export declare const GiveawayStartOptions: GiveawayStartOptions;
export declare const GiveawayEditOptions: GiveawayEditOptions;
export declare const BonusEntry: BonusEntry[];
