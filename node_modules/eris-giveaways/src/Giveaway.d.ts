/// <reference types="node" />
/// <reference types="node" />
import { AdvancedMessageContent, Client, CommandInteraction, Constants, Member, Message, PossiblyUncachedTextableChannel, TextChannel, User } from "eris";
import { EventEmitter } from "events";
import { GiveawayData, LastChanceOptions, BonusEntry, PauseOptions, GiveawaysMessages, GiveawayEditOptions, GiveawayRerollOptions } from "./Constants";
import { GiveawaysManager } from "./Manager";
import { RichEmbed } from "./Util";
/**
 * Represents the Giveaway data class
 */
export declare class Giveaway extends EventEmitter {
    /**
     * The ID of the giveaway channel
     * @type {String}
     */
    channelID: string;
    /**
     * Eris Client
     * @type {Client}
     */
    client: Client;
    /**
     * The end timestamp of the giveaway
     * @type {Number}
     */
    endAt: number;
    /**
     * Whether the giveaway has ended or not
     * @type {Boolean}
     */
    ended: boolean;
    /**
     * The end timeout of the giveaway
     * @type {NodeJS.Timeout}
     */
    endTimeout: NodeJS.Timeout;
    /**
     * The extra data of the giveaway
     * @type {any}
     */
    extraData: any;
    /**
     * The ID of the giveaway guild
     * @type {String}
     */
    guildID: string;
    /**
     * The mention format of the user who hosts the giveaway
     * @type {String}
     */
    hostedBy: string;
    /**
     * The image of the giveaway
     * @type {String}
     */
    image: string;
    /**
     * The main giveaways manager
     * @type {GiveawaysManager}
     */
    manager: GiveawaysManager;
    /**
     * The message object of the giveaway
     * @type {Message<PossiblyUncachedTextableChannel>}
     */
    message: Message<PossiblyUncachedTextableChannel>;
    /**
     * The ID of the giveaway message
     * @type {String}
     */
    messageID: string;
    /**
     * The giveaway messages object
     * @type {GiveawaysMessages}
     */
    messages: GiveawaysMessages;
    /**
     * The giveaway data options
     * @type {GiveawayData}
     */
    options: GiveawayData;
    /**
     * The prize of the giveaway
     * @type {String}
     */
    prize: string;
    /**
     * The start timestamp of the giveaway
     * @type {Number}
     */
    startAt: number;
    /**
     * The thumbnail of the giveaway
     * @type {String}
     */
    thumbnail: string;
    /**
     * The winner count of the giveaway
     * @type {Number}
     */
    winnerCount: number;
    /**
     * An array of giveaway winners ID
     * @type {Array<String>}
     */
    winnerIDs: string[];
    /**
     * Represents the Giveaway data class
     * @param manager The giveaways manager
     * @param options The giveaway data options
     */
    constructor(manager: GiveawaysManager, options: GiveawayData);
    /**
     * An array of `BonusEntry` objects of the giveaway
     * @type {Array<BonusEntry>}
     */
    get bonusEntries(): BonusEntry[];
    /**
     * Whether bots can participate and win a giveaway
     * @type {Boolean}
     */
    get botsCanWin(): boolean;
    /**
     * The channel of the giveaway
     * @type {TextChannel}
     */
    get channel(): TextChannel;
    /**
     * The giveaway data
     * @type {GiveawayData}
     */
    get data(): GiveawayData;
    /**
     * The duration of the giveaway
     * @type {Number}
     */
    get duration(): number;
    /**
     * The embed color of the giveaway
     * @type {Number}
     */
    get embedColor(): number;
    /**
     * The end embed color of the giveaway
     * @type {Number}
     */
    get embedColorEnd(): number;
    /**
     * The exemptMembers function of the giveaway
     * @type {any}
     */
    get exemptMembersFunction(): any;
    /**
     * The exempt permissions of the giveaway
     * @type {Array<String>}
     */
    get exemptPermissions(): [keyof Constants["Permissions"]];
    /**
     * Whether the giveaway is a drop or not
     * @type {Boolean}
     */
    get isDrop(): boolean;
    /**
     * The last chance object of the giveaway
     * @type {LastChanceOptions}
     */
    get lastChance(): LastChanceOptions;
    /**
     * The original message URL of the giveaway
     * @type {String}
     */
    get messageURL(): string;
    /**
     * The pause options object of the giveaway
     * @type {PauseOptions}
     */
    get pauseOptions(): PauseOptions;
    /**
     * The reaction of the giveaway
     * @type {String}
     */
    get reaction(): string;
    /**
     * The remaining time of the giveaway
     * @type {Number}
     */
    get remainingTime(): number;
    /**
     * Check if a user gets a bonus entries for the giveaway
     * @param user The user to check
     * @returns {Promise<Number>}
     */
    checkBonusEntries(user: User): Promise<number>;
    /**
     * Check if a user meets the certain criteria to participate for the giveaway
     * @param user The user to check
     * @returns {Promise<Boolean>}
     */
    checkWinnerEntry(user: User): Promise<boolean>;
    /**
     * Edits a giveaway
     * @param options The edit options
     * @returns {Promise<Giveaway>}
     */
    edit(options?: GiveawayEditOptions): Promise<Giveaway>;
    /**
     * Ends a giveaway
     * @param noWinnerMessage Sent in the channel if there is no valid participants for the giveaway
     * @returns {Promise<Array<Member>>}
     */
    end(noWinnerMessage?: AdvancedMessageContent | string): Promise<Member[]>;
    /**
     * Ensure that end timeout is created for this giveaway
     * @returns {NodeJS.Timeout}
     */
    ensureEndTimeout(): NodeJS.Timeout;
    /**
     * Filter members who are able to participate for the giveaway
     * @param member The member to check
     * @returns {Promise<Boolean>}
     */
    exemptMembers(member: Member): Promise<boolean>;
    /**
     * Fetches the giveaway message from its channel
     * @returns {Promise<Message>}
     */
    fetchMessage(): Promise<Message>;
    /**
     * Fills in a embed with giveaway properties
     * @param embed The filled in embed
     * @returns {?RichEmbed}
     */
    fillInEmbed(embed: RichEmbed): RichEmbed | null;
    /**
     * Fills in a string with giveaway properties
     * @param text The filled in text
     * @returns {?String}
     */
    fillInString(text: string): string | null;
    /**
     * Pauses a giveaway
     * @param options The pause options
     * @returns {Promise<Giveaway>}
     */
    pause(options?: PauseOptions): Promise<Giveaway>;
    /**
     * Rerolls a giveaway
     * @param options The reroll options
     * @param interaction Optional Eris' command interaction
     * @returns {Promise<Array<Member>>}
     */
    reroll(options?: GiveawayRerollOptions, interaction?: CommandInteraction): Promise<Member[]>;
    /**
     * Roll a giveaway to obtains winner(s)
     * @param winnerCount The winner count
     * @returns {Promise<Array<Member>>}
     */
    roll(winnerCount?: number): Promise<Member[]>;
    /**
     * Unpause a giveaway
     * @returns {Promise<Giveaway>}
     */
    unpause(): Promise<Giveaway>;
}
