import { Embed, EmbedAuthor, EmbedField, EmbedFooter, EmbedImage, EmbedOptions } from "eris";
/**
 * Represents an Embed class constructor
 */
export declare class RichEmbed {
    /**
     * The author of the embed
     * @type {EmbedAuthor}
     */
    author: EmbedAuthor;
    /**
     * The color of the embed. Color is in hex number
     * @type {Number}
     */
    color: number;
    /**
     * The description of the embed
     * @type {String}
     */
    description: string;
    /**
     * An array of fields of the embed
     * @type {Array<EmbedField>}
     */
    fields: EmbedField[];
    /**
     * The footer of the embed
     * @type {EmbedFooter}
     */
    footer: EmbedFooter;
    /**
     * The image of the embed
     * @type {EmbedImage}
     */
    image: EmbedImage;
    /**
     * The thumbnail of the embed
     * @type {EmbedImage}
     */
    thumbnail: EmbedImage;
    /**
     * The timestamp of the embed
     * @type {Date | String}
     */
    timestamp: Date | string;
    /**
     * The title of the embed
     * @type {String}
     */
    title: string;
    /**
     * The URL of the embed
     * @type {String}
     */
    url: string;
    /**
     * Represents an Embed class constructor
     * @param {EmbedOptions} data The embed data
     * @param {Boolean} skipValidation
     */
    constructor(data?: EmbedOptions, skipValidation?: boolean);
    /**
     * The accumulated length for the embed title, description, field, footer text, and author name
     * @type {Number}
     * @readonly
     */
    get length(): number;
    /**
     * Compares two given embed field to check whether they are equal
     * @param field The first field
     * @param otherField The second field
     * @returns {Boolean}
     * @ignore
     */
    private _fieldEquals;
    /**
     * Adds a field to the embed. Max is 25
     * @param name The name of the field
     * @param value The value of the field
     * @param inline Whether the field should be displayed inline
     * @returns {RichEmbed}
     */
    addField(name: string, value: string, inline?: boolean): RichEmbed;
    /**
     * Check if the embed is equal to another embed by comparing every single one of their properties
     * @param embed The embed to compare with
     * @returns {Boolean}
     */
    equals(embed: Embed): boolean;
    /**
     * Normalize field input verifies strings
     * @param name The name of the field
     * @param value The value of the field
     * @param inline Whether the field should be displayed inline
     * @returns {EmbedField}
     */
    normalizeField(name: string, value: string, inline?: boolean): EmbedField;
    /**
     * Normalize field input and resolves strings
     * @param fields An array of fields to normalize
     * @returns {EmbedField[]}
     */
    normalizeFields(...fields: EmbedField[]): EmbedField[];
    /**
     * Sets the author of the embed
     * @param name The name of the author
     * @param url The URL of the author
     * @param iconURL The icon URL of the author
     * @returns {RichEmbed}
     */
    setAuthor(name: string, url?: string, iconURL?: string): RichEmbed;
    /**
     * Sets the color of the embed
     * @param color The color of the embed. Color must be in hex number
     * @returns {RichEmbed}
     */
    setColor(color: string | number): RichEmbed;
    /**
     * Sets the description of the embed
     * @param description The description of the embed
     * @returns {RichEmbed}
     */
    setDescription(description: string): RichEmbed;
    /**
     * Sets the foother of the embed
     * @param text The text of the embed
     * @param iconURL The icon URL of the embed
     * @returns {RichEmbed}
     */
    setFooter(text: string, iconURL?: string): RichEmbed;
    /**
     * Sets the image of the embed
     * @param imageURL The image URL of the embed
     * @returns {RichEmbed}
     */
    setImage(imageURL: string): RichEmbed;
    /**
     * Sets the thumbnail of the embed
     * @param thumbnailURL The thumnail URL of the embed
     * @returns {RichEmbed}
     */
    setThumbnail(thumbnailURL: string): RichEmbed;
    /**
     * Sets the timestamp of the embed
     * @param timestamp The timestamp of the embed. Default timestamp is current date
     * @returns {RichEmbed}
     */
    setTimestamp(timestamp?: Date | number): RichEmbed;
    /**
     * Sets the title of the embed
     * @param title The title of the embed
     * @returns {RichEmbed}
     */
    setTitle(title: string): RichEmbed;
    /**
     * Sets the URL of the embed
     * @param url The URL of the embed
     * @returns {RichEmbed}
     */
    setURL(url: string): RichEmbed;
    /**
     * Removes, replaces, and inserts fields in the embed. Max is 25
     * @param index The index to start at
     * @param deleteCount The number of fields to remove
     * @param fields The replacing fields objects
     * @returns {RichEmbed}
     */
    spliceFields(index: number, deleteCount: number, ...fields: any): RichEmbed;
}
